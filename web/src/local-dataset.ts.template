// Copyright (c) 2023 Jean-Daniel Michaud
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/* eslint-disable */
import { Dataset } from '@jdmichaud/dicom-model';

import { LocalDicomInstanceDecoder, InstanceHandle } from './local-dicom-instance-decoder';

/**
 * Implements a Dataset. All the fields are optional and can thus be undefined.
 */
export class LocalDataset implements Dataset {
  constructor(readonly instanceDecoder: LocalDicomInstanceDecoder, readonly instance: InstanceHandle) {
    if (instance === undefined) {
      throw new Error('LocalDataset requires a valid LocalDicomInstanceDecoder as parameter');
    }
  }

  // Metadata ------------------------------------------------------------------
{{~ it.elements :element}}
  // {{=element.prettyName }}
  get {{=element.keyword}}(): {{=element.returnedType}} | undefined {
    return this.x{{=element.tag.toLowerCase()}};
  }

  get x{{=element.tag.toLowerCase()}}(): {{=element.returnedType}} | undefined {
    {{? !element.tag.toLowerCase().includes('x') }}{{? !element.returnedType === 'any' }}return this.instanceDecoder.get<string>(this.instance, 0x{{=element.tag.toLowerCase()}}, 'string', '{{=element.vrArray[0]}}');{{??}}return this.instanceDecoder.get<{{=element.returnedType}}>(this.instance, 0x{{=element.tag.toLowerCase()}}, '{{=element.returnedType}}', '{{=element.vrArray[0]}}');{{?}}{{??}}throw new Error('Unsupported field {{=element.keyword}} ({{=element.tag}})'){{?}}
  }

  {{? element.isLinkable }}async get{{=element.keyword}}(): Promise<{{=element.returnedType}}> {
    const value = this.x{{=element.tag.toLowerCase()}};
    if (value === undefined) {
      throw new Error('{{=element.keyword}} is undefined');
    }
    return value;
  }{{??}}get{{=element.keyword}}(): {{=element.returnedType}} {
    const value = this.x{{=element.tag.toLowerCase()}};
    if (value === undefined) {
      throw new Error('{{=element.keyword}} is undefined');
    }
    return value;
  }{{?}}{{~}}
}
